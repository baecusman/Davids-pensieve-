generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  digestFrequency String @default("WEEKLY") // WEEKLY, MONTHLY, NEVER
  digestEmail     String?
  timezone        String @default("UTC")

  // Relations
  content       Content[]
  analyses      Analysis[]
  concepts      Concept[]
  relationships Relationship[]
  digests       Digest[]
  sources       Source[]
  jobs          Job[]

  @@map("users")
}

model Content {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String?
  content   String   @db.Text
  source    String
  hash      String   // For deduplication
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses      Analysis[]
  relationships Relationship[]

  // Indexes
  @@unique([userId, hash])
  @@index([userId, createdAt])
  @@index([userId, source])
  @@map("content")
}

model Analysis {
  id          String   @id @default(cuid())
  userId      String
  contentId   String
  summary     Json
  entities    Json
  tags        String[]
  priority    Priority @default(READ)
  fullContent String?  @db.Text
  confidence  Float    @default(0.8)
  createdAt   DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, priority])
  @@index([userId, createdAt])
  @@map("analyses")
}

model Concept {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String
  frequency   Int      @default(1)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromRelationships Relationship[] @relation("FromConcept")
  toRelationships   Relationship[] @relation("ToConcept")

  // Indexes
  @@unique([userId, name, type])
  @@index([userId, frequency])
  @@map("concepts")
}

model Relationship {
  id            String   @id @default(cuid())
  userId        String
  fromConceptId String
  toConceptId   String
  contentId     String
  type          String   @default("RELATES_TO")
  strength      Float    @default(0.5)
  createdAt     DateTime @default(now())

  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromConcept Concept @relation("FromConcept", fields: [fromConceptId], references: [id], onDelete: Cascade)
  toConcept   Concept @relation("ToConcept", fields: [toConceptId], references: [id], onDelete: Cascade)
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, fromConceptId, toConceptId, contentId])
  @@index([userId, fromConceptId])
  @@index([userId, toConceptId])
  @@map("relationships")
}

model Source {
  id          String     @id @default(cuid())
  userId      String
  name        String
  url         String
  type        SourceType
  isActive    Boolean    @default(true)
  lastFetched DateTime?
  etag        String?
  lastModified String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, url])
  @@index([userId, isActive])
  @@index([type, isActive])
  @@map("sources")
}

model Digest {
  id          String      @id @default(cuid())
  userId      String
  type        DigestType
  title       String
  content     String      @db.Text
  contentIds  String[]
  status      DigestStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, type, status])
  @@index([scheduledAt])
  @@map("digests")
}

// Job queue table for background processing
model Job {
  id          String    @id @default(cuid())
  userId      String?
  type        String
  payload     Json
  status      JobStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  error       String?
  scheduledAt DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([status, scheduledAt])
  @@index([type, status])
  @@map("jobs")
}

enum Priority {
  SKIM
  READ
  DEEP_DIVE
}

enum SourceType {
  RSS
  PODCAST
  TWITTER
  MANUAL
}

enum DigestType {
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum DigestStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
